let connectionService,queryService,bCrypt,jwt,config;_735‍.x([["default",()=>_735‍.o]]);_735‍.w("./ConnectionService",[["default",["connectionService"],function(v){connectionService=v}]]);_735‍.w("./QueryService",[["default",["queryService"],function(v){queryService=v}]]);_735‍.w("bcrypt",[["default",["bCrypt"],function(v){bCrypt=v}]]);_735‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_735‍.w("../../config",[["default",["config"],function(v){config=v}]]);





class UserService {

    async postUser(firstName, lastName, email, password) {
        let connection;
        const saltRounds = 10;

        try {
            connection = await connectionService.pool.getConnectionAsync();
            const dbQuery = queryService.queries.insertUser;

            bCrypt.genSalt(saltRounds, (err, salt) => {
               if(err) return err;
                bCrypt.hash(password, salt, (err, hash) => {
                    if (err) return err;

                    password = hash;
                    connection.queryAsync(dbQuery, {
                        firstName,
                        lastName,
                        email,
                        password,
                    });
                });

                return 'You successfully created new user';
           });
        } catch (error) {
            return error;
        } finally {
            if(connection){
                connection.release();
            }
        }
    }

    async login(email, password){
        let connection;

        try {
            connection = await connectionService.pool.getConnectionAsync();
            const dbQuery = queryService.queries.getUserById;
            const dbQueryResult = await connection.queryAsync(dbQuery, {
                email,
            });

            const userPassword = dbQueryResult[0].password;
            const checkPassword = await bCrypt.compare(password, userPassword);

            if(checkPassword) {
                const userId = dbQueryResult[0].id;
                const token = jwt.sign({ id: userId }, config.secretJWTKey, { expiresIn: '1h' });

                return token;
            } else {
                return { isSuccess: false };
            }
        } catch (error) {
            return { errorMessage: error.message };
        } finally {
            if(connection) {
                connection.release();
            }
        }
    }
}

_735‍.d(new UserService());
